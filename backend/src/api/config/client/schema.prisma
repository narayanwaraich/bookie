generator client {
  provider = "prisma-client-js"
  output   = "../src/config/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                   @id @default(uuid())
  email                String                   @unique
  username             String                   @unique
  password             String
  name                 String?
  profileImage         String?
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  isActive             Boolean                  @default(true)
  lastLogin            DateTime?
  refreshToken         String?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  isVerified           Boolean                  @default(false)
  verificationToken    String?                  @unique
  bookmarks            Bookmark[]
  ownedCollections     Collection[]             @relation("CollectionOwner")
  collections          Collection[]
  collabCollections    CollectionCollaborator[]
  devices              Device[]
  folders              Folder[]
  collabFolders        FolderCollaborator[]
  tags                 Tag[]
}

model Bookmark {
  id             String                   @id @default(uuid())
  url            String
  title          String
  description    String?
  favicon        String?
  previewImage   String?
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  lastVisited    DateTime?
  visitCount     Int                      @default(0)
  notes          String?
  userId         String
  fullTextSearch Unsupported("tsvector")?
  deletedAt      DateTime?
  isDeleted      Boolean                  @default(false)
  user           User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  collections    BookmarkCollection[]
  tags           BookmarkTag[]
  folders        FolderBookmark[]

  @@index([userId])
  @@index([isDeleted])
  @@index([url])
  @@index([fullTextSearch], type: Gin)
  @@index([userId, isDeleted, createdAt])
  @@index([userId, isDeleted, visitCount])
}

model Folder {
  id            String               @id @default(uuid())
  name          String
  description   String?
  icon          String?
  color         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  userId        String
  parentId      String?
  deletedAt     DateTime?
  isDeleted     Boolean              @default(false)
  parent        Folder?              @relation("FolderHierarchy", fields: [parentId], references: [id])
  children      Folder[]             @relation("FolderHierarchy")
  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookmarks     FolderBookmark[]
  collaborators FolderCollaborator[]

  @@unique([userId, name, parentId])
  @@index([userId])
  @@index([parentId])
  @@index([userId, isDeleted, name])
}

model FolderBookmark {
  folderId   String
  bookmarkId String
  addedAt    DateTime @default(now())
  bookmark   Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  folder     Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@id([folderId, bookmarkId])
  @@index([folderId])
  @@index([bookmarkId])
}

model FolderCollaborator {
  folderId   String
  userId     String
  addedAt    DateTime @default(now())
  permission Role     @default(VIEW)
  folder     Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([folderId, userId])
  @@index([folderId])
  @@index([userId])
}

model Tag {
  id        String        @id @default(uuid())
  name      String
  color     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String
  deletedAt DateTime?
  isDeleted Boolean       @default(false)
  bookmarks BookmarkTag[]
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
  @@index([userId, isDeleted, name])
}

model BookmarkTag {
  tagId      String
  bookmarkId String
  addedAt    DateTime @default(now())
  bookmark   Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([tagId, bookmarkId])
  @@index([tagId])
  @@index([bookmarkId])
}

model Collection {
  id            String                   @id @default(uuid())
  name          String
  description   String?
  isPublic      Boolean                  @default(false)
  publicLink    String?                  @unique
  thumbnail     String?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  userId        String
  ownerId       String
  deletedAt     DateTime?
  isDeleted     Boolean                  @default(false)
  bookmarks     BookmarkCollection[]
  owner         User                     @relation("CollectionOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  user          User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  collaborators CollectionCollaborator[]

  @@unique([userId, name])
  @@index([userId])
  @@index([ownerId])
  @@index([isPublic])
  @@index([userId, isDeleted, updatedAt])
}

model BookmarkCollection {
  collectionId String
  bookmarkId   String
  addedAt      DateTime   @default(now())
  order        Int        @default(0)
  bookmark     Bookmark   @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@id([collectionId, bookmarkId])
  @@index([collectionId])
  @@index([bookmarkId])
}

model CollectionCollaborator {
  collectionId String
  userId       String
  addedAt      DateTime   @default(now())
  permission   Role       @default(VIEW)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([collectionId, userId])
  @@index([collectionId])
  @@index([userId])
}

model Device {
  id         String   @id @default(uuid())
  userId     String
  deviceName String
  deviceType String
  lastSynced DateTime @default(now())
  lastActive DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  VIEW
  EDIT
  ADMIN
}
